{"version":3,"sources":["components/Field/index.js","Validation/index.js","components/Header/index.js","components/LoginForm/index.js","App/index.js","serviceWorker.js","index.js","components/svg/Logo.svg","components/svg/addUsers.svg","components/svg/listOfUsers.svg"],"names":["myInput","props","input","type","placeholder","meta","error","touched","requiredInput","undefined","matchInput","allInputs","password","Header","className","src","Logo","addUsers","listOfUsers","LoginForm","handleSubmit","this","onSubmit","Field","name","component","validate","label","Component","reduxForm","form","App","submit","includes","username","SubmissionError","window","alert","JSON","stringify","Boolean","location","hostname","match","reducers","formReducer","reducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"8PAEcA,EAAU,SAACC,GACkBA,EAAhCC,MAAgCD,EAAzBE,KAAyBF,EAAnBG,YADW,IACEC,EAAMJ,EAANI,KACjC,OACE,oCACE,2CAAWJ,EAAMC,MAAjB,CAAwBC,KAAMF,EAAME,KAAMC,YAAaH,EAAMG,eAC5DC,EAAKC,OACND,EAAKE,SACL,6BACGF,EAAKC,SCVHE,EAAgB,SAACN,GAAD,OAC3BA,OAAQO,EAAH,mFACMC,EAAa,SAACR,EAAOS,GAAR,OACxBT,IAAUS,EAAUC,cAAWH,EAAY,4G,2DCe9BI,MAVf,WACI,OACA,4BAAQC,UAAY,UAChB,yBAAKA,UAAW,eAAc,yBAAKC,IAAKC,OAExC,yBAAKF,UAAU,YAAW,yBAAKC,IAAKE,MAApC,IAAiD,+CACjD,yBAAKH,UAAU,gBAAe,yBAAKC,IAAKG,MAAxC,IAAwD,kDCR1DC,E,iLACM,IACAC,EAAiBC,KAAKpB,MAAtBmB,aACR,OACE,6BACA,kBAAC,EAAD,MACA,0BAAME,SAAUF,GACd,kBAACG,EAAA,EAAD,CACEC,KAAK,WACLC,UAAWzB,EACXG,KAAK,OACLC,YAAY,WACZsB,SAAUlB,IAEZ,kBAACe,EAAA,EAAD,CACEC,KAAK,WACLC,UAAWzB,EACXG,KAAK,WACLC,YAAY,WACZsB,SAAU,CAAClB,EAAeE,KAE5B,kBAACa,EAAA,EAAD,CACEC,KAAK,kBACLC,UAAWzB,EACXG,KAAK,WACLC,YAAY,mBACZsB,SAAU,CAAClB,EAAeE,KAE5B,4BAAQP,KAAK,SAASwB,MAAM,UAA5B,gB,GA5BgBC,aAuCTT,EAJfA,EAAYU,YAAU,CACpBC,KAAM,SADID,CAETV,GCpBYY,E,2MAlBTC,OAAS,SAAA9B,GACP,GAAG,CAAC,iCAAS,2BAAQ,2BAAQ,kCAAS+B,SAAU/B,EAAMgC,UACpD,MAAM,IAAIC,IAAiB,CACzBD,SAAW,gLAGbE,OAAOC,MAAOC,KAAKC,UAAUrC,K,wEAKnC,OACE,oCACA,kBAAC,EAAD,CAAWoB,SAAUD,KAAKW,c,GAddJ,aCQEY,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCVN,IAAMC,EAAW,CAAEd,KAAMe,KACnBC,EAAUC,YAAgBH,GAC1BI,EAAQC,YAAYH,GAE1BI,IAASC,OAAO,kBAAC,IAAD,CAAUH,MAAOA,GAC/B,kBAAC,EAAD,OACWI,SAASC,eAAe,SDmH/B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBEnInBC,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,yC","file":"static/js/main.5b718c19.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n export const myInput = (props) =>{\r\n    const {input, type, placeholder, meta}=props;\r\n    return (\r\n      <>\r\n        <input {...props.input} type={props.type} placeholder={props.placeholder} />\r\n        {meta.error &&\r\n        meta.touched && (\r\n        <div>\r\n          {meta.error}\r\n        </div>\r\n      )}\r\n      </>\r\n    );\r\n};\r\n","export const requiredInput = (input) =>\r\n  input ? undefined : `Требуется ввод`;\r\nexport const matchInput = (input, allInputs) =>\r\n  input === allInputs.password ? undefined : 'Пароль не совпадает';","import React from \"react\";\r\nimport styles from '../Header/style.css'\r\n// import { Link, NavLink } from \"react-router-dom\";\r\n\r\nimport  Logo  from \"../svg/Logo.svg\";\r\nimport  addUsers  from \"../svg/addUsers.svg\";\r\nimport listOfUsers from '../svg/listOfUsers.svg'\r\n\r\nfunction Header() {\r\n    return(\r\n    <header className = \"header\">\r\n        <div className= \"header-logo\"><img src={Logo} /></div>\r\n\r\n        <div className=\"add-user\"><img src={addUsers} /> <span>Add new user</span></div>\r\n        <div className=\"list-ofUsers\"><img src={listOfUsers} /> <span>List of users</span></div>\r\n    </header>\r\n    );\r\n}\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { myInput } from '../Field/index';\r\nimport { requiredInput, matchInput } from '../../Validation';\r\nimport Header from '../Header';\r\n\r\nclass LoginForm extends Component {\r\n  render() {\r\n    const { handleSubmit } = this.props;\r\n    return (\r\n      <div>\r\n      <Header />\r\n      <form onSubmit={handleSubmit}>\r\n        <Field\r\n          name=\"username\"\r\n          component={myInput}\r\n          type=\"text\"\r\n          placeholder=\"Username\"\r\n          validate={requiredInput}\r\n        />\r\n        <Field\r\n          name=\"password\"\r\n          component={myInput}\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          validate={[requiredInput, matchInput]}\r\n        />\r\n        <Field\r\n          name=\"Confirmpassword\"\r\n          component={myInput}\r\n          type=\"password\"\r\n          placeholder=\"Confirm password\"\r\n          validate={[requiredInput, matchInput]}\r\n        />\r\n        <button type=\"submit\" label=\"submit\">Submit</button>\r\n      </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nLoginForm = reduxForm({\r\n  form: 'login',\r\n})(LoginForm);\r\n\r\nexport default LoginForm;\r\n","import React, { Component, Fragment } from 'react';\r\nimport {SubmissionError} from 'redux-form';\r\nimport LoginForm from '../components/LoginForm';\r\n\r\nclass App extends Component {\r\n      submit = input=>{\r\n        if(['Настя', 'Леша', 'Миша', 'Света'].includes (input.username)){\r\n          throw new SubmissionError ({\r\n            username : \"Имя пользователя уже существует\",\r\n          });\r\n        }else{\r\n          window.alert (JSON.stringify(input));\r\n        }\r\n    };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n      <LoginForm onSubmit={this.submit} />\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst reducers = { form: formReducer };\nconst reducer = combineReducers(reducers);\nconst store = createStore(reducer);\n\nReactDOM.render(<Provider store={store}>\n  <App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Logo.2551f83e.svg\";","module.exports = __webpack_public_path__ + \"static/media/addUsers.7e9d623d.svg\";","module.exports = __webpack_public_path__ + \"static/media/listOfUsers.f41d10ed.svg\";"],"sourceRoot":""}